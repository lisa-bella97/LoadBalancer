user root;
worker_processes auto;
pid /run/nginx.pid;

events {
    worker_connections 768;
}

http {
    lua_package_path "/root/lua-resty-upstream-healthcheck/lib/?.lua;;";

    upstream backend {
        server 95.163.251.90 max_fails=3 fail_timeout=30s weight=3;
        server 95.163.248.29 max_fails=3 fail_timeout=30s weight=2;
        server 79.137.175.13 max_fails=3 fail_timeout=30s weight=1;
    }

    upstream grafana {
        server 127.0.0.1:3000;
    }

    lua_shared_dict healthcheck 1m;

    lua_socket_log_errors off;

    init_worker_by_lua_block {
        local hc = require "resty.upstream.healthcheck"

        local ok, err = hc.spawn_checker{
            shm = "healthcheck",  -- defined by "lua_shared_dict"
            upstream = "backend", -- defined by "upstream"
            type = "http",

            http_req = "GET /api/status HTTP/1.0\r\nHost: backend\r\n\r\n",
                    -- raw HTTP request for checking

            interval = 3000,  -- run the check cycle every 3 sec
            timeout = 1000,   -- 1 sec is the timeout for network operations
            fall = 2,  -- # of successive failures before turning a peer down
            rise = 2,  -- # of successive successes before turning a peer up
            valid_statuses = {200},  -- a list valid HTTP status code
            concurrency = 10,  -- concurrency level for test requests
        }
        if not ok then
            ngx.log(ngx.ERR, "failed to spawn health checker: ", err)
            return
        end
    }

    server {
        listen 80;
        location / {
            proxy_pass http://backend;
            proxy_set_header Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_next_upstream error timeout invalid_header http_503;
            proxy_next_upstream_timeout 0;
            proxy_next_upstream_tries 2;
            proxy_connect_timeout 10ms;
            proxy_send_timeout 2s;
            proxy_read_timeout 2s;
        }

        location /check {
            content_by_lua_block {
                local hc = require "resty.upstream.healthcheck"
                ngx.say("Nginx Worker PID: ", ngx.worker.pid())
                ngx.print(hc.status_page())
            }
        }

        location /grafana/ {
            proxy_pass http://grafana/;
            proxy_set_header Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
        }

        location /stub_status {
            stub_status on;
        }
    }

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # Dropping SSLv3, ref: POODLE
    ssl_prefer_server_ciphers on;

    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    gzip on;
    gzip_disable "msie6";
}
